// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "kredit-plus/domain"

	mock "github.com/stretchr/testify/mock"
)

// CustomerTenorRepository is an autogenerated mock type for the CustomerTenorRepository type
type CustomerTenorRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, customerTenorInput
func (_m *CustomerTenorRepository) Create(ctx context.Context, customerTenorInput *domain.CustomerTenor) (*domain.CustomerTenor, error) {
	ret := _m.Called(ctx, customerTenorInput)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.CustomerTenor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CustomerTenor) (*domain.CustomerTenor, error)); ok {
		return rf(ctx, customerTenorInput)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CustomerTenor) *domain.CustomerTenor); ok {
		r0 = rf(ctx, customerTenorInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomerTenor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CustomerTenor) error); ok {
		r1 = rf(ctx, customerTenorInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, customerTenorInput
func (_m *CustomerTenorRepository) Delete(ctx context.Context, customerTenorInput *domain.CustomerTenor) error {
	ret := _m.Called(ctx, customerTenorInput)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CustomerTenor) error); ok {
		r0 = rf(ctx, customerTenorInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields: ctx
func (_m *CustomerTenorRepository) FetchAll(ctx context.Context) ([]domain.CustomerTenor, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchAll")
	}

	var r0 []domain.CustomerTenor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.CustomerTenor, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.CustomerTenor); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CustomerTenor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByID provides a mock function with given fields: ctx, customerTenorID
func (_m *CustomerTenorRepository) FetchByID(ctx context.Context, customerTenorID uint) (domain.CustomerTenor, error) {
	ret := _m.Called(ctx, customerTenorID)

	if len(ret) == 0 {
		panic("no return value specified for FetchByID")
	}

	var r0 domain.CustomerTenor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (domain.CustomerTenor, error)); ok {
		return rf(ctx, customerTenorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) domain.CustomerTenor); ok {
		r0 = rf(ctx, customerTenorID)
	} else {
		r0 = ret.Get(0).(domain.CustomerTenor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, customerTenorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, customerTenorInput
func (_m *CustomerTenorRepository) Update(ctx context.Context, customerTenorInput *domain.CustomerTenor) (*domain.CustomerTenor, error) {
	ret := _m.Called(ctx, customerTenorInput)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.CustomerTenor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CustomerTenor) (*domain.CustomerTenor, error)); ok {
		return rf(ctx, customerTenorInput)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CustomerTenor) *domain.CustomerTenor); ok {
		r0 = rf(ctx, customerTenorInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomerTenor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CustomerTenor) error); ok {
		r1 = rf(ctx, customerTenorInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCustomerTenorRepository creates a new instance of CustomerTenorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerTenorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerTenorRepository {
	mock := &CustomerTenorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
